import sys
sys.path

from plotting import plot

# Task 2.3.2
L = [[2,2], [3,2], [1.75,1], [2,1], [2.25,1], [2.5,1], [2.75,1], [3,1], [3.25,1]]
plot(L,4)

def add2(v,w): return [v[0]+w[0], v[1]+w[1]]

# Task 2.4.3
plot([add2(v, [1,2]) for v in L],4)

def scalar_vector_mult(alpha, v): return [alpha * v[i] for i in range(len(v))]

# Task 2.5.4
plot([scalar_vector_mult(0.5,v) for v in L] ,4)

plot([scalar_vector_mult(i/10,[3,2]) for i in range(11)],5)
plot([scalar_vector_mult(i/100,[3,2]) for i in range(100)],5)

plot([scalar_vector_mult(i/100, [3,2]) for i in range(-1000,1000)],5)

def segment(pt1,pt2) : return[add2(scalar_vector_mult(i/100,pt1), scalar_vector_mult(1-i/100,pt2)) for i in range(100)]

plot(segment([3.5,3],[0.5,1]),4)

# defining a class
class Vec: 
	def __init__(self, labels, function):
		self.D = labels
		self.f = function

v = Vec({'A','B','C'},{'A':1})
v.D
v.f

for d in v.D:
	if d in v.f :
		print(v.f[d])

# Quiz 2.7.1
def zero_vec(D) : return Vec(D,{})
def zero_vec(D) : return Vec(D, {d:0 for d in D})

# defining a procedure can be used to assign a value to a specified entry to vector v
def setitem(v,d,val) : v.f[d] = val
setitem(v, 'B', 2.)

#Quiz 2.7.2
def getitem(v,d): return v.f[d] if d in v.f else 0

#Quiz 2.7.3
def scalar_mul(v,alpha): return Vec(v.D,{d:v.f[d]*alpha for d in v.f})
scalar_mul(v,3)

#Quiz 2.7.4
def add(u,v): return Vec(u.D, {d:getitem(u,d) + getitem(v,d) for d in u.D})
u = Vec(v.D,{'A':5., 'C':10.})
add(u,v).f

def neg(v): return Vec(v.D, {getitem(v,d) * -1 for d in v.f})

def neg(v) : return scalar_mul(v,-1)

def list_dot(u,v): return sum([u[i] * v[i] for i in range(len(u))])
#or
def list_dot(u,v): return sum([a * b for (a,b) in zip(u,v)])

# Example 2.9.5
D = {'hops', 'malt', 'water', 'yeast'}
cost = Vec(D,{'hops' : 2.5,'malt': 1.5, 'water': 0.006, 'yeast': 0.45})
quantity = Vec(D,{'hops' : 6,'malt': 14, 'water': 7, 'yeast': 11})

# Dot product of 2 vectors
total_cost = sum([cost.f[k] * quantity.f[k] for k in cost.D])

def dot_product_list(needle, haystack):
	s = len(needle)
	return [list_dot(needle, haystack[i:i+s]) for i in range(len(haystack)-s)]

def list2vec(L):
	return Vec(set(range(len(L))), {k:x for k,x in enumerate(L)})

from vec import Vec
def list_dot(u,v): 
	x = list(u.f.values())
	y = list(v.f.values())
	return sum([x[i] * y[i] for i in range(len(u.D))])

# Solving the upper traingular linear system
def triangular_solve_n(rowlist, b):
	D = rowlist[0].D
	n = len(D)
	assert D == set(range(n))
	x = zero_vec(D)
	for i in reversed(range(n)):
		setitem(x,i,(b[i] - list_dot(rowlist[i] , x))/rowlist[i].f[i])
	return x

rowlist = [Vec({0,1,2},{0:2,1:3,2:-4}), Vec({0,1,2},{0:0,1:1,2:2}), Vec({0,1,2},{0:0,1:0,2:5})]

triangular_solve_n(rowlist, [10,3,15])

import triangular

label_list = ['a','b','c','d']
D = set(label_list)
rowlist = [Vec({'a','b','c','d'},{'a':4, 'b':-2, 'c':0.5, 'd':1}), Vec({'a','b','c','d'},{'a':0,'b':2, 'c':3, 'd':3}),
	Vec({'a','b','c','d'},{'a':0,'b':0,'c':5, 'd':1}), Vec({'a','b','c','d'},{'a':0,'b':0,'c':0,'d':2})]
b = [6,-4,3,-8]

def list_dot(u,v): 
	x = [u.f[i] for i in sorted(u.f)]
	y = [v.f[i] for i in sorted(v.f)]
	return sum([x[i] * y[i] for i in range(len(u.D))])

def triangular_solve(rowlist,label_list, b):
	D = rowlist[0].D
	x = zero_vec({'a','b','c','d'})
	for j in reversed(range(len(D))):
		c = label_list[j]
		row = rowlist[j]
		setitem(x,c,(b[j] - list_dot(row , x))/row.f[c])
	return x

triangular_solve(rowlist,label_list, b)

############# Lab ##################

import os
os.chdir('/Volumes/MAC AND PC/coursera-coding-the-matrix/Datasets')
f = open('voting_record_dump109.txt')
mylist = list(f)

# Task 2.12.1
def creating_voting_dict(strlist):
	votingdict = dict()
	for i in range(len(strlist)):
		temp = strlist[i].split()
		votingdict[temp[0]] = list(map(int,temp[3:]))
	return(votingdict)

voting_records = creating_voting_dict(mylist)

#Task 2.12.2
def list_dot(u,v): return sum([u[i] * v[i] for i in range(len(u))])

def policy_compare(sen_a, sen_b, voting_dict) :
	similarity = list_dot(voting_dict[sen_a], voting_dict[sen_b])
	return(similarity)

#Task 2.12.3
def most_similar(sen, voting_dict):
	voting_dict_keys = list(voting_dict.keys())
	voting_similarity = dict()
	for i in range(len(voting_dict_keys)):
		if sen != voting_dict_keys[i]:
			voting_similarity[voting_dict_keys[i]] = list_dot(voting_dict[sen], voting_dict[voting_dict_keys[i]])
	return(max(voting_similarity, key = voting_similarity.get))

# Task 2.12.4
def least_similar(sen, voting_dict):
	voting_dict_keys = list(voting_dict.keys())
	voting_similarity = dict()
	for i in range(len(voting_dict_keys)):
		if sen != voting_dict_keys[i]:
			voting_similarity[voting_dict_keys[i]] = list_dot(voting_dict[sen], voting_dict[voting_dict_keys[i]])
	return(min(voting_similarity, key = voting_similarity.get))

# Task 2.12.5
most_similar('Lincoln', voting_records)
least_similar('Santorum', voting_records)

# Task 2.12.7
def find_average_similarity(sen, sen_set, voting_dict):
	voting_similarity = list()
	for i in range(len(sen_set)):
		if sen != sen_set[i]:
			voting_similarity.append(list_dot(voting_dict[sen], voting_dict[sen_set[i]]))
	return(sum(voting_similarity)/len(voting_similarity))

democrats_list = list()
for i in range(len(mylist)):
	temp = mylist[i].split()
	if temp[1] == "D":
		democrats_list.append(temp[0])

democrats_similarity = dict()
voting_dict_keys = list(voting_records.keys())
for i in range(len(voting_records)):
	democrats_similarity[voting_dict_keys[i]] = find_average_similarity(voting_dict_keys[i],
democrats_list, voting_records)

max(democrats_similarity, key = democrats_similarity.get)

#Task 2.12.8
def find_average_record(sen_set, voting_dict):
	record_len = len(voting_dict[sen_set[0]])
	temp = [0 for i in range(record_len)]
	for i in range(len(sen_set)-1):
		temp = [voting_dict[sen_set[i]][j] + temp[j] for j in range(record_len)]
	return [temp[i]/len(sen_set) for i in range(record_len)]

average_democrat_record = find_average_record(democrats_list, voting_records)

democrats_similarity_2 = dict()
voting_dict_keys = list(voting_records.keys())
for i in range(len(voting_records)):
	democrats_similarity_2[voting_dict_keys[i]] = list_dot(voting_records[voting_dict_keys[i]],average_democrat_record)

max(democrats_similarity_2, key = democrats_similarity_2.get)

# Task 2.12.9

def bitter_rivals(voting_dict):
	voting_dict_keys = list(voting_dict.keys())
	voting_similarity = dict()
	for i in range(len(voting_dict_keys)):
		for j in range(i+1,len(voting_dict_keys)):
			voting_similarity[(voting_dict_keys[i],voting_dict_keys[j])] = list_dot(voting_dict[voting_dict_keys[i]], voting_dict[voting_dict_keys[j]])

	return(min(voting_similarity, key = voting_similarity.get))

# Problem 2.14.8
def scalar_vector_mult(alpha, v): return [alpha * v[i] for i in range(len(v))]
def add2(v,w): return [v[0]+w[0], v[1]+w[1]]
plot([add2(scalar_vector_mult(i/100,[-1.5,2]),scalar_vector_mult(1-i/100,[3,0])) for i in range(-100,100)],5)

plot([add2(scalar_vector_mult(i/100,[-2,2]),scalar_vector_mult(1-i/100,[2,1])) for i in range(100)],5)
